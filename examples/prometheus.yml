# ============================================================================
# PROMETHEUS - CONFIGURAÇÃO MODULAR
# ============================================================================
# Esta configuração utiliza arquivos externos para targets e regras,
# facilitando manutenção e escalabilidade da stack de observabilidade.
#
# Estrutura de diretórios:
# /etc/prometheus/
# ├── prometheus.yml          # Este arquivo (configuração principal)
# ├── rules/                  # Regras de alerting modulares
# │   ├── general.yml        # Regras gerais (InstanceDown, CPU, Memory)
# │   ├── docker.yml         # Regras específicas do Docker
# │   └── snmp.yml           # Regras para dispositivos SNMP
# └── targets/               # Grupos de hosts modulares
#     ├── node-exporters.yml # Servidores Linux/Windows
#     ├── cadvisor.yml       # Containers Docker
#     └── snmp-switches.yml  # Switches e dispositivos de rede
# ============================================================================

# Configuração Global
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'production'
    region: 'us-east-1'
    prometheus_replica: '01'
  # Timeout global para scraping
  scrape_timeout: 10s

# Configuração do Alertmanager
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
      timeout: 10s
      api_version: v2
      path_prefix: '/'
      scheme: http

# ============================================================================
# CARREGAMENTO MODULAR DE REGRAS
# ============================================================================
# As regras são carregadas automaticamente de múltiplos diretórios
# permitindo organização temática e manutenção por equipes diferentes
rule_files:
  - "/etc/prometheus/rules/*.yml"
  - "/etc/prometheus/rules/**/*.yml"

# ============================================================================
# CONFIGURAÇÕES DE SCRAPING MODULARES
# ============================================================================
# Cada job utiliza file_sd_configs para carregar targets de arquivos externos
# permitindo adicionar/remover hosts sem editar este arquivo principal

scrape_configs:
  # ========================================
  # PROMETHEUS SELF-MONITORING
  # ========================================
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 15s
    metrics_path: /metrics
    honor_labels: false
    honor_timestamps: true
    relabel_configs:
      - target_label: service
        replacement: 'prometheus'
      - target_label: team
        replacement: 'sre'

  # ========================================
  # ALERTMANAGER MONITORING
  # ========================================
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 15s
    metrics_path: /metrics
    relabel_configs:
      - target_label: service
        replacement: 'alertmanager'
      - target_label: team
        replacement: 'sre'

  # ========================================
  # NODE EXPORTERS (SERVIDORES)
  # ========================================
  # Carrega targets de /etc/prometheus/targets/node-exporters.yml
  - job_name: 'node-exporters'
    file_sd_configs:
      - files:
          - '/etc/prometheus/targets/node-exporters.yml'
        refresh_interval: 30s
    scrape_interval: 15s
    scrape_timeout: 10s
    metrics_path: /metrics
    honor_labels: false
    relabel_configs:
      # Preserva o endereço original como instance
      - source_labels: [__address__]
        target_label: instance
      # Adiciona informação do arquivo de configuração
      - source_labels: [__meta_filepath]
        target_label: config_file
        replacement: 'node-exporters.yml'
      # Adiciona timestamp da última atualização
      - target_label: last_updated
        replacement: '{{ reReplaceAll ".*/(\\d{4}-\\d{2}-\\d{2}).*" "$1" __meta_filepath }}'

  # ========================================
  # CADVISOR (CONTAINERS)
  # ========================================
  # Carrega targets de /etc/prometheus/targets/cadvisor.yml
  - job_name: 'cadvisor'
    file_sd_configs:
      - files:
          - '/etc/prometheus/targets/cadvisor.yml'
        refresh_interval: 30s
    scrape_interval: 30s
    scrape_timeout: 15s
    metrics_path: /metrics
    honor_labels: true
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
      - source_labels: [__meta_filepath]
        target_label: config_file
        replacement: 'cadvisor.yml'
    # Filtra métricas desnecessárias para reduzir cardinality
    metric_relabel_configs:
      # Remove métricas de containers pausados
      - source_labels: [container_label_io_kubernetes_pod_name]
        regex: '.*pause.*'
        action: drop
      # Remove métricas de filesystem temporários
      - source_labels: [__name__, device]
        regex: 'container_fs_.*; tmpfs'
        action: drop

  # ========================================
  # SNMP EXPORTER (DISPOSITIVOS DE REDE)
  # ========================================
  # Carrega targets de /etc/prometheus/targets/snmp-switches.yml
  - job_name: 'snmp-switches'
    file_sd_configs:
      - files:
          - '/etc/prometheus/targets/snmp-switches.yml'
        refresh_interval: 60s
    scrape_interval: 60s
    scrape_timeout: 30s
    metrics_path: /snmp
    params:
      module: [if_mib]  # Módulo padrão, pode ser sobrescrito por labels
    relabel_configs:
      # Configura o target para o SNMP Exporter
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: snmp-exporter:9116
      # Usa módulo específico se definido nas labels
      - source_labels: [snmp_module]
        target_label: __param_module
      - source_labels: [__meta_filepath]
        target_label: config_file
        replacement: 'snmp-switches.yml'

  # ========================================
  # BLACKBOX EXPORTER (CONECTIVIDADE)
  # ========================================
  # Monitora conectividade HTTP/HTTPS, ICMP, TCP, DNS
  - job_name: 'blackbox-http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - http://prometheus:9090
          - http://grafana:3000
          - http://alertmanager:9093
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115
      - target_label: service
        replacement: 'connectivity'
      - target_label: team
        replacement: 'sre'

  # ========================================
  # CUSTOM EXPORTERS
  # ========================================
  # Espaço reservado para exporters customizados
  # Descomente e configure conforme necessário
  
  # # MySQL Exporter
  # - job_name: 'mysql-exporter'
  #   static_configs:
  #     - targets: ['mysql-exporter:9104']
  #   scrape_interval: 30s
  
  # # PostgreSQL Exporter
  # - job_name: 'postgres-exporter'
  #   static_configs:
  #     - targets: ['postgres-exporter:9187']
  #   scrape_interval: 30s
  
  # # Redis Exporter
  # - job_name: 'redis-exporter'
  #   static_configs:
  #     - targets: ['redis-exporter:9121']
  #   scrape_interval: 30s
  
  # # Nginx Exporter
  # - job_name: 'nginx-exporter'
  #   static_configs:
  #     - targets: ['nginx-exporter:9113']
  #   scrape_interval: 30s

# === CONFIGURAÇÕES AVANÇADAS ===

# Configuração de armazenamento remoto (opcional)
# remote_write:
#   - url: "https://prometheus-remote-write-endpoint"
#     basic_auth:
#       username: "${REMOTE_WRITE_USERNAME}"
#       password: "${REMOTE_WRITE_PASSWORD}"

# Configuração de leitura remota (opcional)
# remote_read:
#   - url: "https://prometheus-remote-read-endpoint"
#     basic_auth:
#       username: "${REMOTE_READ_USERNAME}"
#       password: "${REMOTE_READ_PASSWORD}"

# === NOTAS DE CONFIGURAÇÃO ===
# 
# 1. INTERVALOS:
#    - scrape_interval: 15-30s para a maioria dos casos
#    - evaluation_interval: igual ou menor que scrape_interval
#    - scrape_timeout: 1/3 do scrape_interval
#
# 2. CARDINALIDADE:
#    - cAdvisor pode gerar muitas métricas, use metric_relabel_configs
#    - SNMP pode ter muitas interfaces, monitore apenas as críticas
#
# 3. TARGETS:
#    - Use service discovery quando possível (file_sd, consul_sd)
#    - Para ambientes dinâmicos, considere Kubernetes service discovery
#
# 4. SEGURANÇA:
#    - Use variáveis de ambiente para credenciais
#    - Configure TLS quando disponível
#    - Limite acesso por firewall/network policies
#
# 5. PERFORMANCE:
#    - Monitore uso de memória do Prometheus
#    - Configure retenção adequada (tempo vs espaço)
#    - Use recording rules para queries complexas frequentes