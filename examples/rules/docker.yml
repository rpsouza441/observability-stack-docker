# ============================================================================
# REGRAS DE ALERTA DOCKER/CONTAINERS - CONFIGURA√á√ÉO MODULAR
# ============================================================================
# Este arquivo cont√©m regras de alerting espec√≠ficas para monitoramento de containers
# Docker e orquestra√ß√£o de containers, coletadas via cAdvisor
#
# Estrutura:
# - docker.critical: Alertas P1 (containers cr√≠ticos down, problemas graves)
# - docker.warning: Alertas P2 (performance, recursos, restarts)
# - docker.info: Alertas P3 (informativos sobre containers)
# ============================================================================

groups:
  # ========================================
  # ALERTAS CR√çTICOS DOCKER (P1)
  # ========================================
  - name: docker.critical
    interval: 30s
    rules:
      # Container cr√≠tico parado
      - alert: CriticalContainerDown
        expr: |
          (
            container_last_seen{name!="",name!~".*_exporter.*",name!~".*test.*"} < (time() - 60)
          )
          and on(name) (
            label_replace(
              up{job="cadvisor"}, "name", "$1", "container", "(.+)"
            ) == 0
          )
        for: 1m
        labels:
          severity: critical
          priority: P1
          team: platform
          category: availability
        annotations:
          summary: "üî¥ Container cr√≠tico {{ $labels.name }} est√° DOWN"
          description: |
            O container {{ $labels.name }} na inst√¢ncia {{ $labels.instance }} n√£o est√° rodando h√° mais de 1 minuto.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Job: {{ $labels.job }}
            - Dura√ß√£o: > 1 minuto
            
            **A√ß√µes imediatas:**
            1. Verificar status do container: `docker ps -a`
            2. Verificar logs: `docker logs {{ $labels.name }}`
            3. Tentar restart: `docker restart {{ $labels.name }}`
            4. Verificar recursos do host
          runbook_url: "https://runbooks.company.com/container-down"
          alert_id: "DOCKER-001"

      # Container com restarts excessivos
      - alert: ContainerHighRestartRate
        expr: |
          increase(container_start_time_seconds{name!="",name!~".*_exporter.*"}[1h]) > 5
        for: 0m  # Alerta imediato
        labels:
          severity: critical
          priority: P1
          team: platform
          category: stability
        annotations:
          summary: "üî¥ Container {{ $labels.name }} reiniciando EXCESSIVAMENTE"
          description: |
            O container {{ $labels.name }} reiniciou {{ $value }} vezes na √∫ltima hora.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Restarts: {{ $value }} na √∫ltima hora
            - Threshold cr√≠tico: > 5 restarts/hora
            
            **A√ß√µes imediatas:**
            1. Verificar logs do container: `docker logs {{ $labels.name }}`
            2. Verificar health checks e liveness probes
            3. Verificar recursos dispon√≠veis (CPU/RAM)
            4. Verificar depend√™ncias externas
            5. Considerar rollback se deploy recente
          runbook_url: "https://runbooks.company.com/container-restart-loop"
          alert_id: "DOCKER-002"

      # Container usando CPU cr√≠tica
      - alert: ContainerCPUCritical
        expr: |
          (
            rate(container_cpu_usage_seconds_total{name!="",name!~".*_exporter.*"}[5m]) * 100
          ) > 95
        for: 5m
        labels:
          severity: critical
          priority: P1
          team: platform
          category: performance
        annotations:
          summary: "üî¥ Container {{ $labels.name }} com CPU CR√çTICA"
          description: |
            O container {{ $labels.name }} est√° usando {{ printf "%.1f" $value }}% de CPU h√° mais de 5 minutos.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - CPU usage: {{ printf "%.1f" $value }}%
            - Threshold cr√≠tico: 95%
            - Dura√ß√£o: > 5 minutos
            
            **A√ß√µes imediatas:**
            1. Verificar processos dentro do container
            2. Verificar se h√° CPU throttling
            3. Considerar aumentar CPU limits
            4. Verificar se h√° loops infinitos ou deadlocks
          runbook_url: "https://runbooks.company.com/container-cpu-critical"
          alert_id: "DOCKER-003"

      # Container sem mem√≥ria dispon√≠vel
      - alert: ContainerMemoryCritical
        expr: |
          (
            container_memory_usage_bytes{name!="",name!~".*_exporter.*"} / 
            container_spec_memory_limit_bytes{name!="",name!~".*_exporter.*"} * 100
          ) > 95
        for: 2m
        labels:
          severity: critical
          priority: P1
          team: platform
          category: memory
        annotations:
          summary: "üî¥ Container {{ $labels.name }} com MEM√ìRIA CR√çTICA"
          description: |
            O container {{ $labels.name }} est√° usando {{ printf "%.1f" $value }}% da mem√≥ria limite.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Memory usage: {{ printf "%.1f" $value }}%
            - Threshold cr√≠tico: 95%
            - Dura√ß√£o: > 2 minutos
            
            **A√ß√µes imediatas:**
            1. Verificar memory leaks na aplica√ß√£o
            2. Considerar aumentar memory limits
            3. Verificar se h√° OOMKilled events
            4. Analisar heap dumps se aplic√°vel
          runbook_url: "https://runbooks.company.com/container-memory-critical"
          alert_id: "DOCKER-004"

  # ========================================
  # ALERTAS DE WARNING DOCKER (P2)
  # ========================================
  - name: docker.warning
    interval: 60s
    rules:
      # Container com CPU alta
      - alert: ContainerHighCPUUsage
        expr: |
          (
            rate(container_cpu_usage_seconds_total{name!="",name!~".*_exporter.*"}[5m]) * 100
          ) > 80
        for: 10m
        labels:
          severity: warning
          priority: P2
          team: platform
          category: performance
        annotations:
          summary: "‚ö†Ô∏è Container {{ $labels.name }} com CPU alta"
          description: |
            O container {{ $labels.name }} est√° usando {{ printf "%.1f" $value }}% de CPU h√° mais de 10 minutos.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - CPU usage: {{ printf "%.1f" $value }}%
            - Threshold: 80%
            - Dura√ß√£o: > 10 minutos
            
            **A√ß√µes recomendadas:**
            1. Monitorar tend√™ncia de uso
            2. Verificar se √© comportamento esperado
            3. Considerar otimiza√ß√µes de c√≥digo
            4. Avaliar necessidade de scaling horizontal
          runbook_url: "https://runbooks.company.com/container-high-cpu"
          alert_id: "DOCKER-005"

      # Container com mem√≥ria alta
      - alert: ContainerHighMemoryUsage
        expr: |
          (
            container_memory_usage_bytes{name!="",name!~".*_exporter.*"} / 
            container_spec_memory_limit_bytes{name!="",name!~".*_exporter.*"} * 100
          ) > 85
        for: 10m
        labels:
          severity: warning
          priority: P2
          team: platform
          category: memory
        annotations:
          summary: "‚ö†Ô∏è Container {{ $labels.name }} com mem√≥ria alta"
          description: |
            O container {{ $labels.name }} est√° usando {{ printf "%.1f" $value }}% da mem√≥ria limite.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Memory usage: {{ printf "%.1f" $value }}%
            - Threshold: 85%
            - Dura√ß√£o: > 10 minutos
            
            **A√ß√µes recomendadas:**
            1. Monitorar crescimento de mem√≥ria
            2. Verificar poss√≠veis memory leaks
            3. Considerar otimiza√ß√µes de mem√≥ria
            4. Avaliar aumento de limits se necess√°rio
          runbook_url: "https://runbooks.company.com/container-high-memory"
          alert_id: "DOCKER-006"

      # Container com restarts moderados
      - alert: ContainerRestartWarning
        expr: |
          increase(container_start_time_seconds{name!="",name!~".*_exporter.*"}[6h]) > 2
        for: 1m
        labels:
          severity: warning
          priority: P2
          team: platform
          category: stability
        annotations:
          summary: "‚ö†Ô∏è Container {{ $labels.name }} reiniciando frequentemente"
          description: |
            O container {{ $labels.name }} reiniciou {{ $value }} vezes nas √∫ltimas 6 horas.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Restarts: {{ $value }} em 6 horas
            - Threshold: > 2 restarts/6h
            
            **A√ß√µes recomendadas:**
            1. Verificar logs para padr√µes de erro
            2. Verificar health checks
            3. Monitorar recursos do container
            4. Verificar depend√™ncias externas
          runbook_url: "https://runbooks.company.com/container-restart-warning"
          alert_id: "DOCKER-007"

      # Container com I/O de disco alto
      - alert: ContainerHighDiskIO
        expr: |
          (
            rate(container_fs_io_time_seconds_total{name!="",name!~".*_exporter.*"}[5m]) * 100
          ) > 80
        for: 10m
        labels:
          severity: warning
          priority: P2
          team: platform
          category: storage
        annotations:
          summary: "‚ö†Ô∏è Container {{ $labels.name }} com I/O alto"
          description: |
            O container {{ $labels.name }} est√° com {{ printf "%.1f" $value }}% de utiliza√ß√£o de I/O.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - I/O usage: {{ printf "%.1f" $value }}%
            - Threshold: 80%
            - Dura√ß√£o: > 10 minutos
            
            **A√ß√µes recomendadas:**
            1. Verificar opera√ß√µes de I/O intensivas
            2. Otimizar acesso a arquivos/banco
            3. Considerar volumes mais r√°pidos
            4. Verificar logs excessivos
          runbook_url: "https://runbooks.company.com/container-high-io"
          alert_id: "DOCKER-008"

      # Container com rede alta
      - alert: ContainerHighNetworkUsage
        expr: |
          (
            rate(container_network_receive_bytes_total{name!="",name!~".*_exporter.*"}[5m]) +
            rate(container_network_transmit_bytes_total{name!="",name!~".*_exporter.*"}[5m])
          ) > 100 * 1024 * 1024  # 100 MB/s
        for: 10m
        labels:
          severity: warning
          priority: P2
          team: platform
          category: network
        annotations:
          summary: "‚ö†Ô∏è Container {{ $labels.name }} com tr√°fego de rede alto"
          description: |
            O container {{ $labels.name }} est√° transferindo {{ $value | humanizeBytes }}/s de dados.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Network throughput: {{ $value | humanizeBytes }}/s
            - Threshold: 100 MB/s
            - Dura√ß√£o: > 10 minutos
            
            **A√ß√µes recomendadas:**
            1. Verificar se √© tr√°fego esperado
            2. Analisar padr√µes de comunica√ß√£o
            3. Otimizar transfer√™ncias de dados
            4. Verificar poss√≠veis loops de rede
          runbook_url: "https://runbooks.company.com/container-high-network"
          alert_id: "DOCKER-009"

      # Container pr√≥ximo do limite de file descriptors
      - alert: ContainerHighFileDescriptors
        expr: |
          (
            container_file_descriptors{name!="",name!~".*_exporter.*"} / 
            container_ulimits_soft{name!="",name!~".*_exporter.*",ulimit="max_open_files"} * 100
          ) > 80
        for: 5m
        labels:
          severity: warning
          priority: P2
          team: platform
          category: resources
        annotations:
          summary: "‚ö†Ô∏è Container {{ $labels.name }} com muitos file descriptors"
          description: |
            O container {{ $labels.name }} est√° usando {{ printf "%.1f" $value }}% dos file descriptors dispon√≠veis.
            
            **Detalhes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - FD usage: {{ printf "%.1f" $value }}%
            - Threshold: 80%
            - Dura√ß√£o: > 5 minutos
            
            **A√ß√µes recomendadas:**
            1. Verificar file descriptor leaks
            2. Verificar conex√µes n√£o fechadas
            3. Considerar aumentar ulimits
            4. Otimizar uso de arquivos/sockets
          runbook_url: "https://runbooks.company.com/container-high-fd"
          alert_id: "DOCKER-010"

  # ========================================
  # ALERTAS INFORMATIVOS DOCKER (P3)
  # ========================================
  - name: docker.info
    interval: 300s  # 5 minutos
    rules:
      # Novo container iniciado
      - alert: ContainerStarted
        expr: |
          changes(container_start_time_seconds{name!="",name!~".*_exporter.*"}[5m]) > 0
        for: 1m
        labels:
          severity: info
          priority: P3
          team: platform
          category: lifecycle
        annotations:
          summary: "‚ÑπÔ∏è Container {{ $labels.name }} foi iniciado"
          description: |
            O container {{ $labels.name }} foi iniciado recentemente.
            
            **Informa√ß√µes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Detec√ß√£o: Mudan√ßa no start time
            
            **Verifica√ß√µes recomendadas:**
            1. Confirmar se foi deploy planejado
            2. Verificar logs de inicializa√ß√£o
            3. Validar health checks
            4. Confirmar funcionamento da aplica√ß√£o
          alert_id: "DOCKER-011"

      # Container com uptime baixo (poss√≠vel restart recente)
      - alert: ContainerLowUptime
        expr: |
          (time() - container_start_time_seconds{name!="",name!~".*_exporter.*"}) < 300
        for: 1m
        labels:
          severity: info
          priority: P3
          team: platform
          category: lifecycle
        annotations:
          summary: "‚ÑπÔ∏è Container {{ $labels.name }} com uptime baixo"
          description: |
            O container {{ $labels.name }} est√° rodando h√° menos de 5 minutos.
            
            **Informa√ß√µes:**
            - Container: {{ $labels.name }}
            - Inst√¢ncia: {{ $labels.instance }}
            - Uptime: {{ $value | humanizeDuration }}
            
            **Verifica√ß√µes recomendadas:**
            1. Verificar se foi restart planejado
            2. Verificar logs de inicializa√ß√£o
            3. Monitorar estabilidade inicial
          alert_id: "DOCKER-012"

# ============================================================================
# NOTAS DE CONFIGURA√á√ÉO DOCKER
# ============================================================================
#
# 1. M√âTRICAS PRINCIPAIS:
#    - container_last_seen: √öltima vez que o container foi visto
#    - container_start_time_seconds: Timestamp de in√≠cio do container
#    - container_cpu_usage_seconds_total: Uso de CPU acumulado
#    - container_memory_usage_bytes: Uso atual de mem√≥ria
#    - container_spec_memory_limit_bytes: Limite de mem√≥ria configurado
#    - container_fs_io_time_seconds_total: Tempo de I/O de disco
#    - container_network_*_bytes_total: Tr√°fego de rede
#    - container_file_descriptors: File descriptors em uso
#
# 2. FILTROS IMPORTANTES:
#    - name!="": Exclui containers sem nome
#    - name!~".*_exporter.*": Exclui exporters do Prometheus
#    - name!~".*test.*": Exclui containers de teste
#
# 3. THRESHOLDS RECOMENDADOS:
#    - CPU: 80% warning, 95% critical
#    - Mem√≥ria: 85% warning, 95% critical
#    - Restarts: 2/6h warning, 5/1h critical
#    - I/O: 80% warning
#    - Network: 100 MB/s warning
#    - File Descriptors: 80% warning
#
# 4. TEMPOS DE FOR:
#    - Cr√≠ticos: 1-5 minutos
#    - Warnings: 5-10 minutos
#    - Info: 1 minuto
#    - Restarts: 0m (imediato para cr√≠ticos)
#
# 5. LABELS OBRIGAT√ìRIOS:
#    - severity: critical/warning/info
#    - priority: P1/P2/P3
#    - team: platform (respons√°vel por containers)
#    - category: availability/performance/memory/stability/etc
#
# 6. INTEGRA√á√ÉO COM CADVISOR:
#    - Certifique-se que cAdvisor est√° coletando m√©tricas
#    - Configure job="cadvisor" no prometheus.yml
#    - Verifique se containers t√™m labels adequados
#
# 7. COMANDOS DE VALIDA√á√ÉO:
#    promtool check rules docker.yml
#    promtool query instant 'up{job="cadvisor"}'
#    promtool query instant 'container_last_seen'
# ============================================================================